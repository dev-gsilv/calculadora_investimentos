openapi: 3.1.0
info:
    title: Simulfix API
    description: Simulfix é uma API financeira. Simulando diversos tipos de investimentos em renda fixa, você compara os rendimentos para decidir onde melhor investir seu capital.
    version: 1.0.0
basePath: /

components:
    securitySchemes:
        bearerAuth:
            type: http
            scheme: bearer
            bearerFormat: JWT
        userIdHeader:
            type: string
            in: header
            name: X-usuarioId
        userRoleHeader:
            type: string
            in: header
            name: X-role
    responses:
        UnauthorizedError401:
            description: Unauthorized - Token de acesso não encontrado ou inválido.
            content:
                application/json:
                    schema:
                        type: object
                        example: Acesso negado!
        ForbiddenError403:
            description: Forbidden - Usuário não tem permissão de acesso.
            content:
                application/json:
                    schema:
                        type: object
                        example: Você não tem permissão para ver este recurso!
        NotFoundError404:
            description: Not Found - Nenhum objeto encontrado.
            content:
                application/json:
                    schema:
                        type: object
                        example: Não há resultados para sua busca.
    schemas:
        UsuarioPost:
            type: object
            properties:
                nome:
                    type: string
                    example: Fulano da Silva Sauro
                email:
                    type: string
                    example: fulano.ss@mail.com
                senha:
                    type: string
                    example: JD@56x8&@t
            required:
                - nome
                - email
                - senha
        UsuarioGet:
            type: object
            properties:
                _id:
                    type: string
                    example: 64bdc44a9b37ab98ddce2d30
                nome:
                    type: string
                    example: Fulano da Silva Sauro
                email:
                    type: string
                    example: fulano.ss@mail.com
                createdAt:
                    type: string
                    example: 2023-08-15T19:10:22.063Z
                updatedAt:
                    type: string
                    example: 2023-08-15T19:10:22.063Z
                __v:
                    type: int
                    example: 0

paths:
    /usuario/registro:
        post:
            tags: [Usuário]
            summary: Cria um novo usuário.
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/UsuarioPost'
            responses:
                '201':
                    description: Created - Novo usuário registrado com sucesso.
                    content:
                        text/plain:
                            schema:
                                type: string
                                example: Bem-vindo ao Simulfix, José Dias Tavares.
                '400':
                    description: Bad Request - Erro de validação para 'nome', 'e-mail' e/ou 'senha'.
                    content:
                        application/json:
                            schema:
                                type: object
                                example: Este e-mail já foi registrado!
                '500':
                    description: Internal Server Error - O servidor encontrou um erro inesperado.
                    content:
                        application/json:
                            schema:
                                type: object
                                example: Erro no servidor. Por favor, tente novamente!

    /usuario/{id}:
        get:
            security:
                bearerAuth: []
                userRoleHeader: []
                userIdHeader: []
            tags: [Usuário]
            summary: Busca um usuário por meio de seu ID.
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                      type: string
                      format: objectId
                      minimum: 24
                      example: 64bdc44a9b37ab98ddce2d30
            responses:
                '200':
                    description: OK - Usuário encontrado.
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UsuarioGet'
                '401':
                    $ref: '#/components/responses/UnauthorizedError401'
                '403':
                    $ref: '#/components/responses/ForbiddenError403'
                '404':
                    $ref: '#/components/responses/NotFoundError404'
        put:
            security:
                bearerAuth: []
            tags: [Usuário]
            summary: Atualiza os dados de um usuário, por meio de seu ID.
            requestBody:
            parameters:
            responses:
                '200':
                    description: OK - Usuário atualizado.
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UsuarioGet'
                '401':
                    $ref: '#/components/responses/UnauthorizedError401'
                '403':
                    $ref: '#/components/responses/ForbiddenError403'
                '404':
                    $ref: '#/components/responses/NotFoundError404'
        delete:
            security:
                bearerAuth: []
            tags: [Usuário]
            summary: Remove um usuário por meio de seu ID.
            parameters:
            responses:
                '204':
                    description: No Content - Usuário removido.
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UsuarioGet'
                '401':
                    $ref: '#/components/responses/UnauthorizedError401'
                '403':
                    $ref: '#/components/responses/ForbiddenError403'
                '404':
                    $ref: '#/components/responses/NotFoundError404'

    /usuario:
        get:
            security:
                bearerAuth: []
            tags: [Usuário]
            summary: Busca todos os usuários registrados. Exclusivo para o administrador do sistema.
            responses:
                '200':
                    description: OK - Usuário(s) encontrado(s).
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UsuarioGet'
                '401':
                    $ref: '#/components/responses/UnauthorizedError401'
                '403':
                    $ref: '#/components/responses/ForbiddenError403'
                '404':
                    $ref: '#/components/responses/NotFoundError404'
        delete:
            security:
                bearerAuth: []
            tags: [Usuário]
            summary: Remove vários usuários registrados. Exclusivo para o administrador do sistema.
            requestBody:
            responses:
                '204':
                    description: No Content - Usuário(s) removido(s).
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UsuarioGet'
                '401':
                    $ref: '#/components/responses/UnauthorizedError401'
                '403':
                    $ref: '#/components/responses/ForbiddenError403'
